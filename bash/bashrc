# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines in the history. See bash(1) for more options
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoredups:ignorespace

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
#case "$TERM" in
#    xterm-color) color_prompt=yes;;
#esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

#if [ "$color_prompt" = yes ]; then
#    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\n\$ '
#else
#    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\n\$ '
#fi
#unset color_prompt force_color_prompt

## If this is an xterm set the title to user@host:dir
#case "$TERM" in
#xterm*|rxvt*)
#    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
#    ;;
#*)
#    ;;
#esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi


# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi


#######################
# Dotfile Integration #
#######################
shopt -s nullglob


if [ -e $HOME/.dotfiles_home ]
then
    DOTFILES_HOME=`cat $HOME/.dotfiles_home`
fi



# Functions integration
# Will source custom functions from func.d in this dir.
if [ -d $DOTFILES_HOME/bash/func.d ]
then
    for file in `ls $DOTFILES_HOME/bash/func.d/`
    do
        source $DOTFILES_HOME/bash/func.d/$file
    done
fi

# Dotfile section walking
for dir in `ls $DOTFILES_HOME`
do
    if [[ -d $DOTFILES_HOME/$dir && ! $dir = "bash" && ! $dir = "bin" ]]
    then
        for file in `ls $DOTFILES_HOME/$dir/`
        do
            if [ ${file:(-3)} = ".sh" ]
            then
                source $DOTFILES_HOME/$dir/$file
            fi
        done
    fi
done

# Dotfile aliases
if [ -e $DOTFILES_HOME/bash/bash_aliases ]
then
    source $DOTFILES_HOME/bash/bash_aliases
fi

# Customizations for the current system.
# This file isn't created by unpack.sh
# and isn't tracked by the repo.
if [ -e $HOME/.bash_custom ]
then
	source $HOME/.bash_custom
fi

# Sourcing the closing stuff. Everything set in final.sh
# should be the last in the bashrc file, thus avoiding 
# overrides.
if [ -e $DOTFILES_HOME/bash/final.sh ]
then
    source $DOTFILES_HOME/bash/final.sh
fi



# Include DOTFILES manpages.
# These manpages reference the commands that are included 
# in the Dotfiles packages. Their src files can be found 
# in $DOTFILES_HOME/bash/mansrc/, while precompiled man 
# pages can be found in the adjacent `man` dir.
export MANPATH=:$DOTFILES_HOME/bash/man

shopt -u nullglob
