" Modified Vimrc.
" Based on the Ubuntu vimrc from 2008 by Bram Moolenaar <Bram@vim.org>.
"

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" Runtime?!
set runtimepath=~/.vim,$VIM/vimfiles,$VIMRUNTIME

"Adding Pathogen
call pathogen#infect()

"Vundle stuff
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()


" Colors?
set t_Co=256
"set t_AB=^[[48;5;%dm


" allow backspacing over everything in insert mode
set backspace=indent,eol,start

if has("vms")
  set nobackup        " do not keep a backup file, use versions instead
else
  set backup        " keep a backup file
endif

"
" Default Vim Settings
"

set history=50        " keep 50 lines of command line history
set ruler        " show the cursor position all the time
set showcmd        " display incomplete commands
set incsearch        " do incremental searching
set textwidth=100
set tabstop=4        " sets tabwidth to 4
set shiftwidth=4    " sets shiftwidth to 4
set softtabstop=4
set expandtab

" Don't use Ex mode, use Q for formatting
map Q gq

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
  nnoremap <silent> <F4> <Esc><Esc>:noh<CR>:pc!<CR>

endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END

  "autocmd FileType * set noexpandtab

  " My Python configurations that rely on autocmd
  augroup myPython
    "Sets tabs to spaces for Python
    "autocmd FileType python set expandtab|set softtabstop=4

    autocmd FileType python set foldmethod=indent
    autocmd FileType python set tags+=$HOME/.vim/tags/python.ctags
    "autocmd FileType python map <F2>  @='I#j'<CR>
    "autocmd FileType python map! <F2>  @='I#j'<CR>
    "autocmd FileType python map <F3>  @=':s/\(\s*\)#\(.*\)/\1\2/j'<CR><F4>

  augroup END

  " Tex Mods
  augroup TexMods
    autocmd FileType tex set autoindent
    autocmd FileType tex set syntax=tex
    autocmd FileType tex nnoremap <silent> <F5> :!pdflatex %<cr>
    autocmd FileType tex inoremap <silent> <F5> :!pdflatex %<cr>

  augroup END

  augroup RstMods
    autocmd FileType rst set autoindent
    autocmd FileType rst map <F10> yypVr
  augroup END

  augroup html
    autocmd FileType html set autoindent
    autocmd FileType html set tabstop=2
    autocmd FileType html set shiftwidth=2
    autocmd FileType html set softtabstop=2
  augroup END

  augroup htmljinja
    autocmd FileType htmljinja set autoindent
    autocmd FileType htmljinja set tabstop=2
    autocmd FileType htmljinja set shiftwidth=2
    autocmd FileType htmljinja set softtabstop=2
  augroup END


  augroup arduino
    "Arduino Filetypes
    autocmd! BufNewFile,BufRead *.pde setlocal ft=arduino
    autocmd! BufNewFile,BufRead *.ino setlocal ft=arduino
  augroup END

  augroup YCM_C
    "C filetype YouCompleteMe settings
    autocmd! FileType c set tabstop=2
    autocmd! FileType c set shiftwidth=2
    autocmd! FileType c set softtabstop=2
    autocmd! FileType c let g:ycm_collect_identifiers_from_tags_files=1
  augroup END

else

  set autoindent        " always set autoindenting on

endif " has("autocmd")


"++++++++++++++++++++
"  Personal Configs
"++++++++++++++++++++

set nu

if has("autocmd")
  "Adding Views and Folding
  au BufWinLeave * silent! mkview
  au BufWinEnter * silent! loadview
endif

"Fold Column
set foldcolumn=0

"Changes the default location of the *~ files.
set backupdir=~/.vim/backup,/tmp,.

"Enables paste-mode toggling
set pastetoggle=<F7>

" Turns on mode indicator
set showmode

" status line
" Some of it stolen from Ron Duplain
set statusline=%f%m%r%h\ \ %y\ %v\ %l[%p%%]
set rulerformat=%50(%=%t%R%M\ %y\ c%v\ %-P%)
set ruler

" Set colors to shale, my custom colorscheme
"colorscheme shale
"
" Switching to torte for a spell
"colorscheme torte2
colorscheme tango

let mapleader = ","

"Persistent undo
try
    set undodir=~/.vim/undodir
    set undofile
catch
endtry

" Turn on JS folding
let javaScript_fold=1

" Function to set tabs to 2. Useful for txt/html files
function! Tab2()
    set tabstop=2
    set shiftwidth=2
    set softtabstop=2
endfunction

function! Tab4()
    set tabstop=4
    set shiftwidth=4
    set softtabstop=4
endfunction

""""""""""""""""
" Python Stuff "
""""""""""""""""
"python with virtualenv support
py << EOF
import os
import sys
if 'VIRTUAL_ENV' in os.environ:
  project_base_dir = os.environ['VIRTUAL_ENV']
  activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
  execfile(activate_this, dict(__file__=activate_this))
EOF


"""""""""""
" CONFIGS "
"""""""""""

" Vim-git-gutter configurations
let g:gitgutter_enabled = 0
highlight clear SignColumn

"Vim-Javascript configs
let g:html_indent_inctags = "html,body,head,tbody"
let g:html_indent_script1 = "inc"
let g:html_indent_style1 = "inc"


"config for Vim-Statline
"hi StatusLine guifg=#000000 guibg=#FFFFFF ctermfg=0 ctermbg=15
"hi StatusLineNC guifg=#808080 guibg=#000000 ctermfg=8 ctermbg=0

let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 2

set laststatus=2

" YouCompleteMe "

" Closes Autocomplete after you exit insertion mode.
" Is less annoying than without it, but may still be too much.
let g:ycm_autoclose_preview_window_after_insertion = 1
" Switch to this if Preview is still too annoying.
"let g:ycm_autoclose_preview_window_after_completion = 0
" Set GoTo buffer to show in split window
let g:ycm_goto_buffer_command = 'horizontal-split'

" YCM Debug Logging
"let g:ycm_server_log_level = 'debug'


"Enable better python syntax from 
let g:python_version_2 = 1

let g:python_highlight_all = 1

" Riv Configs "

" Change Riv blank folding
let g:riv_fold_blank = 0

let g:riv_section_levels = '=-^"~+'

" Gundo Configs
"""""""""""""""
" put undo window on right
let g:gundo_right = 1
" Put diff on bottom
let g:gundo_preview_bottom = 1

"""""""""""
" My Maps "
"""""""""""


" Map CTRL+F12 to call Tab2.
map silent [24;5~ :call Tab2()

" F12 lays out the foldcolumn command, lets you set width
map <F12> :set foldcolumn=

" Makes :W write as well.
cnoreabbrev W w
" Makes :Q quit as well.
cnoreabbrev Q q

" Map F1 to Gundo
nnoremap <F6> :GundoToggle<CR>

" Map F2 to comment in normal, insert, and visual modes
nnoremap <silent> <F2> :call NERDComment('n', "alignLeft")<cr>
inoremap <silent> <F2> :call NERDComment('n', "alignLeft")<cr>
vnoremap <silent> <F2> :call NERDComment('x', "alignLeft")<cr>

" Map F3 to uncomment in normal, insert, and visual modes
nnoremap <silent> <F3> :call NERDComment('n', "uncomment")<cr>
inoremap <silent> <F3> :call NERDComment('n', "uncomment")<cr>
vnoremap <silent> <F3> :call NERDComment('x', "uncomment")<cr>
nnoremap <silent> <F11> :setlocal spell! spelllang=en_us<CR>
inoremap <silent> <F11> :setlocal spell! spelllang=en_us<CR>a

nnoremap <leader>jd :YcmCompleter GoTo<CR>

if exists(":Tabularize")
  nmap <leader>m= :Tabularize /=<CR>
  vmap <leader>m= :Tabularize /=<CR>
  nmap <leader>m: :Tabularize /:\zs<CR>
  vmap <leader>m: :Tabularize /:\zs<CR>
  nmap <leader>m| :Tabularize /|\l1<CR>
  vmap <leader>m| :Tabularize /|\l1<CR>
endif

inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a

function! s:align()
  let p = '^\s*|\s.*\s|\s*$'
  if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
    let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
    let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
    Tabularize/|/l1
    normal! 0
    call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
  endif
endfunction

" vim-gitgutter integration
nnoremap <silent> <F9> :GitGutterToggle<cr>
inoremap <silent> <F9> :GitGutterToggle<cr>
vnoremap <silent> <F9> :GitGutterToggle<cr>

"""""""""""""""""""""
" Colorscheme Tools "
"""""""""""""""""""""

" Show syntax highlighting groups for word under cursor
nmap <C-S-P> :call <SID>SynStack()<CR>
function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc


""    Syntastic
""=================
"let g:syntastic_enable_signs=1
"let g:syntastic_auto_jump=1
"let g:syntastic_stl_format = '[%E{Err: %fe #%e}%B{, }%W{Warn: %fw #%w}]'
"let g:syntastic_mode_map = { 'mode': 'passive'}
""                           \ 'active_filetypes': ['python', 'php', 'tex'],
""                           \ 'passive_filetypes': [] }
"map <leader>s :SyntasticToggleMode<CR>
"map <silent> <leader>l :lcl<CR>
"map <silent> <leader>e :Errors<CR>
"map <silent> <leader>a :SyntasticCheck<CR>


"    Vundle
" ============

" let Vundle manage Vundle
" required. Do not remove if you use Vundle
Bundle 'gmarik/vundle'

" My own vim bundles
Bundle 'ajford/markdowntools' 
Bundle 'ajford/rsttools'
Bundle 'ajford/vimkivy'

" Jinja2 support
Bundle 'Glench/Vim-Jinja2-Syntax'

" Nerdcommenter
Bundle 'scrooloose/nerdcommenter'

" Tabular
Bundle 'godlygeek/tabular'

" HTML5
Bundle 'othree/html5-syntax.vim'

Bundle 'loremipsum'
Bundle 'RST-Tables'

" Markdown
Bundle 'plasticboy/vim-markdown'

"Vim Git Gutter
Bundle 'airblade/vim-gitgutter'

"Vim indention guides
Bundle 'nathanaelkane/vim-indent-guides'

"Vim-Javascript - Better JS support
Bundle 'pangloss/vim-javascript'

"Vim Instant Markdown
" WARNING -- External Dependencies
" SEE https://github.com/suan/vim-instant-markdown
"Bundle 'suan/vim-instant-markdown'

"Vim-JSON
Bundle 'elzr/vim-json'

"Vim-Airline - a vim status bar
Bundle 'bling/vim-airline'

"YouCompleteMe - vim auto-completion
Bundle 'Valloric/YouCompleteMe'

"Colors
Bundle 'guns/xterm-color-table.vim'

"Better Python syntax
Bundle 'hdima/python-syntax'

"Better C++ syntax
Bundle 'octol/vim-cpp-enhanced-highlight' 

" RST tools (folding, etc.)
Bundle 'Rykka/riv.vim'

" Graphic Undo Tree
Bundle 'sjl/gundo.vim'

" Ansible Syntax Highlighting - Ansible-Vim
Bundle 'pearofducks/ansible-vim'
