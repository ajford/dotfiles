" An example for a vimrc file.
"
" Maintainer:	Bram Moolenaar <Bram@vim.org>
" Last change:	2008 Jul 02
"
" To use it, copy it to
"     for Unix and OS/2:  ~/.vimrc
"	      for Amiga:  s:.vimrc
"  for MS-DOS and Win32:  $VIM\_vimrc
"	    for OpenVMS:  sys$login:.vimrc


"Arduino Filetypes
autocmd! BufNewFile,BufRead *.pde setlocal ft=arduino
autocmd! BufNewFile,BufRead *.ino setlocal ft=arduino


" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif

" Colors?
set t_Co=256
"set t_AB=^[[48;5;%dm

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible
set nu

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

if has("vms")
  set nobackup		" do not keep a backup file, use versions instead
else
  set backup		" keep a backup file
endif

"
" Default Vim Settings
"

set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set incsearch		" do incremental searching
set textwidth=80
set tabstop=4		" sets tabwidth to 4
set shiftwidth=4	" sets shiftwidth to 4
set softtabstop=4
set expandtab

" Don't use Ex mode, use Q for formatting
map Q gq

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" In many terminal emulators the mouse works just fine, thus enable it.
"if has('mouse')
"  set mouse=a
"endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
  nnoremap <F4> :noh<CR>

endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END

  "autocmd FileType * set noexpandtab

  " My Python configurations that rely on autocmd
  augroup myPython
    "Sets tabs to spaces for Python
    "autocmd FileType python set expandtab|set softtabstop=4

    autocmd FileType python set foldmethod=indent
    autocmd FileType python set tags+=$HOME/.vim/tags/python.ctags
    "autocmd FileType python map <F2>  @='I#j'<CR>
    "autocmd FileType python map! <F2>  @='I#j'<CR>
    "autocmd FileType python map <F3>  @=':s/\(\s*\)#\(.*\)/\1\2/j'<CR><F4>

  augroup END

  " Tex Mods
  augroup TexMods
	autocmd FileType tex set autoindent
	autocmd FileType tex set syntax=tex

  augroup END

  augroup RstMods
	autocmd FileType rst set autoindent
	autocmd FileType rst map <F11> yypVr

  augroup END

  augroup html
	autocmd FileType html set autoindent
	autocmd FileType html set tabstop=2
	autocmd FileType html set shiftwidth=2
	autocmd FileType html set softtabstop=2
  augroup END

  augroup htmljinja
	autocmd FileType htmljinja set autoindent
	autocmd FileType htmljinja set tabstop=2
	autocmd FileType htmljinja set shiftwidth=2
	autocmd FileType htmljinja set softtabstop=2
  augroup END

else

  set autoindent		" always set autoindenting on

endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif


"++++++++++++++++++++
"  Personal Configs
"++++++++++++++++++++


if has("autocmd")
  "Adding Views and Folding
  au BufWinLeave * silent! mkview
  au BufWinEnter * silent! loadview
endif

"Fold Column
set foldcolumn=0
map <F12> :set foldcolumn=

""""""""""
" MyMaps "
""""""""""

map [23;2~ :set syntax=htmljinja<CR>
map O1;5Q :set tabstop=2<CR>:set shiftwidth=2<CR>:set softtabstop=2<CR>
map O1;5S :set tabstop=4<CR>:set shiftwidth=4<CR>:set softtabstop=4<CR>

"Changes the default location of the *~ files.
set backupdir=~/.vim/backup,/tmp,.

"if has("python")
"
"python << EOF
"import os
"import sys
"import vim
"for p in sys.path:
"    if os.path.isdir(p):
"        vim.command(r"set path+=%s" % (p.replace(" ", r"\ ")))
"EOF
"endif

nnoremap <F5> :set invpaste paste?<CR>
set pastetoggle=<F5>
set showmode

"Adding Pathogen
call pathogen#infect()

"Let w!! sudo save
"cmap w!! w !sudo tee % >/dev/null

colorscheme shale

let mapleader = ","

" Fast editing of the .vimrc
"map <leader>e :e! ~/.vimrc<cr>
command Vimrc e! ~/.vimrc

" When vimrc is edited, reload it
autocmd! bufwritepost vimrc.symlink source ~/.vimrc

"set laststatus=2
set statusline=%f%m%r%h\ \ %y\ %v\ %l[%p%%]%{SyntasticStatuslineFlag()}
set rulerformat=%50(%=%{SyntasticStatuslineFlag()}%t%R%M\ %y\ c%v\ %-P%)
set ruler

"Persistent undo
try
    set undodir=~/.vim/undodir
    set undofile
catch
endtry

"    Syntastic
"=================
let g:syntastic_enable_signs=1
let g:syntastic_auto_jump=1
let g:syntastic_stl_format = '[%E{Err: %fe #%e}%B{, }%W{Warn: %fw #%w}]'
let g:syntastic_mode_map = { 'mode': 'passive'}
"                           \ 'active_filetypes': ['python', 'php', 'tex'],
"                           \ 'passive_filetypes': [] }
map <leader>s :SyntasticToggleMode<CR>
map <silent> <leader>l :lcl<CR>
map <silent> <leader>e :Errors<CR>
map <silent> <leader>a :SyntasticCheck<CR>

" Makes :W write as well.
cnoreabbrev W w 
cnoreabbrev Q q 

function! Tab2()
	set tabstop=2
	set shiftwidth=2
	set softtabstop=2
endfunction

nnoremap <silent> <F2> :call NERDComment(0, "norm")<cr>
inoremap <silent> <F2> :call NERDComment(0, "norm")<cr>
vnoremap <silent> <F2> :call NERDComment(1, "norm")<cr>
nnoremap <silent> <F3> :call NERDComment(0, "uncomment")<cr>
inoremap <silent> <F3> :call NERDComment(0, "uncomment")<cr>
vnoremap <silent> <F3> :call NERDComment(1, "uncomment")<cr>
nnoremap <silent> <F11> :setlocal spell! spelllang=en_us<CR>
inoremap <silent> <F11> :setlocal spell! spelllang=en_us<CR>a


if exists(":Tabularize")
  nmap <leader>m= :Tabularize /=<CR>
  vmap <leader>m= :Tabularize /=<CR>
  nmap <leader>m: :Tabularize /:\zs<CR>
  vmap <leader>m: :Tabularize /:\zs<CR>
  nmap <leader>m| :Tabularize /|\l1<CR>
  vmap <leader>m| :Tabularize /|\l1<CR>
endif

inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a
 
function! s:align()
  let p = '^\s*|\s.*\s|\s*$'
  if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
    let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
    let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
    Tabularize/|/l1
    normal! 0
    call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
  endif
endfunction

